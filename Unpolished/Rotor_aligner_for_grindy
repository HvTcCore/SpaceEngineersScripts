/*
Instructions:
1. Change _rotorName to the name of your rotor
2. Tune the PID constants if you want
3. Put the angle that you want to align to in the CUSTOM DATA 
   of the rotor. (If it doesnt find anything there, it will use 0).
4. Enjoy!

- Love Whiplash
*/

const string _rotorName = "My Rotor Name";
const double _proportionalGain = 50;
const double _integralGain = 0;
const double _derivativeGain = 0;


PID _pid = new PID(_proportionalGain, _integralGain, _derivativeGain, 0.1, 1.0 / 6.0);
Program()
{
    Runtime.UpdateFrequency = UpdateFrequency.Update10;
}

void Main(string arg, UpdateType updateType)
{
    var rotor = GridTerminalSystem.GetBlockWithName(_rotorName) as IMyMotorStator;
    if (rotor == null)
    {
        Echo($"Error: no rotor named '{_rotorName}'");
        return;
    }

    double angle = 0;
    bool parsed = double.TryParse(rotor.CustomData, out angle);
    if (!parsed)
        angle = 0;
        
    Vector3D desiredVector = GetVectorFromRotorAngle((float)MathHelper.ToRadians(angle), rotor);
    Vector3D currentVector = GetVectorFromRotorAngle(rotor.Angle, rotor);
    
    double angularError = VectorAngleBetween(desiredVector, currentVector);
    angularError *= -Math.Sign(Vector3D.Dot(rotor.WorldMatrix.Up, currentVector.Cross(desiredVector)));
    double velocity = _pid.Control(angularError);

    rotor.TargetVelocityRPM = (float)velocity;
}

/// <summary>
/// Computes angle between 2 vectors
/// </summary>
/// <param name="a"></param>
/// <param name="b"></param>
/// <param name="useSmallestAngle">Determines if method finds the smallest of the 2 angles between the vectors</param>
/// <returns>Angle between vectors in radians</returns>
double VectorAngleBetween(Vector3D a, Vector3D b, bool useSmallestAngle = false) //returns radians 
{
    if (Vector3D.IsZero(a) || Vector3D.IsZero(b))
        return 0;
    else if (useSmallestAngle)
        return Math.Acos(MathHelper.Clamp(Math.Abs(a.Dot(b)) / Math.Sqrt(a.LengthSquared() * b.LengthSquared()), -1, 1));
    else
        return Math.Acos(MathHelper.Clamp(a.Dot(b) / Math.Sqrt(a.LengthSquared() * b.LengthSquared()), -1, 1));
}

static Vector3D GetVectorFromRotorAngle(float angle, IMyMotorStator rotor)
{
    double x = MyMath.FastSin(angle);
    double y = MyMath.FastCos(angle);
    var rotorMatrix = rotor.WorldMatrix;
    return rotorMatrix.Backward * y + rotor.WorldMatrix.Left * x;
}

//Whip's PID controller class v6 - 11/22/17
public class PID
{
    double _kP = 0;
    double _kI = 0;
    double _kD = 0;
    double _integralDecayRatio = 0;
    double _lowerBound = 0;
    double _upperBound = 0;
    double _timeStep = 0;
    double _inverseTimeStep = 0;
    double _errorSum = 0;
    double _lastError = 0;
    bool _firstRun = true;
    bool _integralDecay = false;
    public double Value { get; private set; }

    public PID(double kP, double kI, double kD, double lowerBound, double upperBound, double timeStep)
    {
        _kP = kP;
        _kI = kI;
        _kD = kD;
        _lowerBound = lowerBound;
        _upperBound = upperBound;
        _timeStep = timeStep;
        _inverseTimeStep = 1 / _timeStep;
        _integralDecay = false;
    }

    public PID(double kP, double kI, double kD, double integralDecayRatio, double timeStep)
    {
        _kP = kP;
        _kI = kI;
        _kD = kD;
        _timeStep = timeStep;
        _inverseTimeStep = 1 / _timeStep;
        _integralDecayRatio = integralDecayRatio;
        _integralDecay = true;
    }

    public double Control(double error)
    {
        //Compute derivative term
        var errorDerivative = (error - _lastError) * _inverseTimeStep;

        if (_firstRun)
        {
            errorDerivative = 0;
            _firstRun = false;
        }

        //Compute integral term
        if (!_integralDecay)
        {
            _errorSum += error * _timeStep;

            //Clamp integral term
            if (_errorSum > _upperBound)
                _errorSum = _upperBound;
            else if (_errorSum < _lowerBound)
                _errorSum = _lowerBound;
        }
        else
        {
            _errorSum = _errorSum * (1.0 - _integralDecayRatio) + error * _timeStep;
        }

        //Store this error as last error
        _lastError = error;

        //Construct output
        this.Value = _kP * error + _kI * _errorSum + _kD * errorDerivative;
        return this.Value;
    }

    public double Control(double error, double timeStep)
    {
        _timeStep = timeStep;
        _inverseTimeStep = 1 / _timeStep;
        return Control(error);
    }

    public void Reset()
    {
        _errorSum = 0;
        _lastError = 0;
        _firstRun = true;
    }
}
